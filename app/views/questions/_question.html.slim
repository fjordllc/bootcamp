.question.page-content
  header.page-content-header
    .page-content-header__start
      .page-content-header__user
        = render 'users/icon', user: question.user, link_class: 'page-content-header__user-link', image_class: 'page-content-header__user-icon'
    .page-content-header__end
      a.a-count-badge href='#comments'
        .a-count-badge__label
          | 回答
        .a-count-badge__value.js-answer-count class=(question.answers.blank? ? 'is-zero' : '')
          | #{question.answers.size}

      .page-content-header__row
        .page-content-header__before-title
          - if question.practice_id.present?
            = link_to question.practice.title, practice_path(question.practice_id), class: 'a-category-link'
        h1.page-content-header__title class=(question.wip ? 'is-wip' : '')
          - if question.correct_answer.present?
            span.a-title-label.is-solved.is-success.js-solved-status
              | 解決済
          - elsif question.wip?
            span.a-title-label.is-wip
              | WIP
          - else
            span.a-title-label.is-solved.is-danger.js-solved-status
              | 未解決
          | #{question.title}

      .page-content-header__row
        .page-content-header-metas
          .page-content-header-metas__start
            - if question.wip?
              .page-content-header-metas__meta
                .a-meta
                  span.a-meta__value
                    | 質問作成中
            .page-content-header-metas__meta
              = link_to question.user.long_name, user_path(question.user), class: 'a-user-name'
            - if !question.wip?
              .page-content-header-metas__meta
                time.a-meta
                  span.a-meta__label
                    | 公開
                  span.a-meta__value
                    time(datetime="#{question.published_at.to_datetime}")
                      | #{l question.published_at}
              .page-content-header-metas__meta
                .a-meta
                  span.a-meta__label
                    | 更新
                  time.a-meta__value
                    time(datetime="#{question.updated_at.to_datetime}")
                      | #{l question.updated_at}

      .page-content-header__row
        .page-content-header-actions
          .page-content-header-actions__start
            .page-content-header-actions__action
              div(data-vue='WatchToggle' data-vue-watchable-id:number="#{question.id}" data-vue-watchable-type='Question')
            .page-content-header-actions__action
              #js-bookmark(data-bookmarkable-id="#{question.id}", data-bookmarkable-type='Question')
          .page-content-header-actions__end
            .page-content-header-actions__action
              = link_to question_path(question, format: :md), class: 'a-button is-sm is-secondary is-block', target: '_blank', rel: 'noopener' do
                | Raw

      .page-content-header__row
        .page-content-header__tags
          = react_component('Tags/Tags', { tagsInitialValue: question.tag_list.join(',').to_s, tagsParamName: 'question[tag_list]', tagsInputId: 'question_tag_list', tagsType: 'Question', tagsTypeId: question.id.to_s })

  .a-card
    .card-body
      .card__description
        .a-long-text.is-md.js-markdown-view
          = question.description
    hr.a-border-tint
    = render 'reactions/reactions', reactionable: question
    hr.a-border-tint
    footer.card-footer class=(current_user.id == question.user.id || current_user.mentor ? '' : 'is-hidden')
      .card-main-actions
        ul.card-main-actions__items
          li.card-main-actions__item
            = link_to edit_question_path(question), class: 'card-main-actions__action a-button is-sm is-secondary is-block' do
              i#new.fa-solid.fa-pen
              | 内容修正
          li.card-main-actions__item.is-sub.is-only-mentor class=(current_user.mentor ? '' : 'is-hidden')
            =link_to '削除する', question_path(question), data: { confirm: '本当に削除しますか？質問はなるべく消さず、もし質問者が自己解決した場合も、質問者自身で解決した手段や手順を回答に記入し、それをベストアンサーにしてこの質問を解決することを即すようにしてください。' }, method: :delete, class: 'card-main-actions__muted-action'
          li.card-main-actions__item.is-sub class=(current_user.mentor ? 'is-hidden' : '')
            label.card-main-actions__muted-action for='modal-delete-request'
              | 削除申請
