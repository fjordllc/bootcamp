= form_with model: movie, local: true, class: 'form', html: { name: 'movie' } do |f|
  .form__items
    .form-item
      .row
        .col-lg-6.col-xs-12
          .form-item
            = f.label :practice, class: 'a-form-label'
            .select-practices
              = f.select(:practice_id, practice_options(@categories), { include_blank: '関連プラクティスを指定しない' }, { id: 'js-choices-single-select' })
    .form-item
      .row
        .col-md-6.col-xs-12
          = f.label :title, class: 'a-form-label'
          = f.text_field :title, class: 'a-text-input js-warning-form'
    .form-item
      .row.js-markdown-parent
        .col-md-6.col-xs-12
          = f.label :description, class: 'a-form-label'
          .form-textarea
            .form-textarea__body
              = f.text_area :description, class: 'a-text-input js-warning-form markdown-form__text-area js-markdown',
              data: { 'preview': '.js-preview', 'input': '.file-input' }
        .col-md-6.col-xs-12
          .a-form-label
            | プレビュー
          .js-preview.a-long-text.markdown-form__preview
    .form-item
      .row
        .col-md-6.col-xs-12
          = f.label :movie_data, class: 'a-form-label'
          .form-item-file-input.js-movie-file-input.a-file-input.is-movie
            label.js-movie-file-input__preview
              - if @movie.movie_data.attached?
                = video_tag url_for(@movie.movie_data.blob), controls: true, width: '717.52', height: '403.59'
                p 動画を変更
              - else
                p 動画を選択
              = f.file_field :movie_data, class: 'a-text-input', accept: 'video/mp4, video/quicktime', direct_upload: true

    .form-item
      .row
        .col-md-6.col-xs-12
          label.a-form-label
            | サムネイル画像
          .form-item-file-input.a-file-input.is-movie
            .thumbnail-preview
              img#thumbnail-preview-image[src="" alt="Thumbnail Preview" style="width: 100%; height: auto;"]
              input#thumbnail-file[name="thumbnail" type="file"]

    .form-item
      .row
        .col-md-6.col-xs-12
          = f.label :tag_list, 'タグを入力してください', class: 'a-form-label'
          = render partial: 'tags_input', locals: { taggable: movie }
  .form-actions
    ul.form-actions__items
      li.form-actions__item.is-main
        = f.submit 'WIP', class: 'a-button is-lg is-secondary is-block', id: 'js-shortcut-wip'
      li.form-actions__item.is-main
        = button_tag(class: 'a-button is-lg is-primary is-block') do
          - case params[:action]
          - when 'new', 'create'
            | 動画を追加
          - when 'edit', 'update'
            | 内容を更新
      li.form-actions__item.is-sub
        - case params[:action]
        - when 'new', 'create'
          = link_to 'キャンセル', :movies, class: 'a-button is-sm is-text'
        - when 'edit', 'update'
          = link_to 'キャンセル', :movies, class: 'a-button is-sm is-text'

javascript:
  document.addEventListener("DOMContentLoaded", function() {
    const fileInput = document.querySelector('.js-movie-file-input input[type="file"]');
    const thumbnailInput = document.getElementById('thumbnail-file');
    const previewImage = document.getElementById('thumbnail-preview-image');

    fileInput.addEventListener("change", function(event) {
      const file = event.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
          const video = document.createElement("video");
          video.src = e.target.result;
          video.addEventListener("loadedmetadata", function() {
            this.currentTime = this.duration / 4; // Or any other logic to choose the thumbnail frame
          });
          video.addEventListener("seeked", function() {
            const canvas = document.createElement("canvas");
            canvas.width = 640; // Adjust as needed
            canvas.height = 360; // Adjust as needed
            const ctx = canvas.getContext("2d");
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
            canvas.toBlob(function(blob) {
              const thumbnailFile = new File([blob], "thumbnail.jpg", { type: 'image/jpeg' });
              const dataTransfer = new DataTransfer();
              dataTransfer.items.add(thumbnailFile);
              thumbnailInput.files = dataTransfer.files;

              // Update preview
              const url = URL.createObjectURL(blob);
              previewImage.src = url;
            }, 'image/jpeg');
          });
        };
        reader.readAsDataURL(file);
      }
    });
  });
